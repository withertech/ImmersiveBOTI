package com.withertech.tim_wim_holes.optifine_compatibility;

import net.minecraft.block.Block;
import net.minecraft.client.Minecraft;
import net.minecraft.client.renderer.GameRenderer;
import net.minecraft.client.renderer.texture.Texture;
import net.minecraft.client.world.ClientWorld;
import net.minecraft.util.math.vector.Vector4f;
import net.optifine.expr.IExpressionBool;
import net.optifine.shaders.*;
import net.optifine.shaders.config.*;
import net.optifine.shaders.uniform.*;
import net.optifine.util.DynamicDimension;
import org.lwjgl.BufferUtils;
import org.lwjgl.opengl.GLCapabilities;

import java.io.File;
import java.nio.ByteBuffer;
import java.nio.FloatBuffer;
import java.nio.IntBuffer;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.Set;
import java.util.regex.Pattern;

//do not forget to update it when optifine changes Shaders class
public class PerDimensionContext
{

	public Minecraft mc;
	public GameRenderer entityRenderer;
	public boolean isInitializedOnce;
	public boolean isShaderPackInitialized;
	public GLCapabilities capabilities;
	public String glVersionString;
	public String glVendorString;
	public String glRendererString;
	public boolean hasGlGenMipmap;
	public int countResetDisplayLists;
	public int renderDisplayWidth;
	public int renderDisplayHeight;
	public int renderWidth;
	public int renderHeight;
	public boolean isRenderingWorld;
	public boolean isRenderingSky;
	public boolean isCompositeRendered;
	public boolean isRenderingDfb;
	public boolean isShadowPass;
	public boolean isEntitiesGlowing;
	public boolean isSleeping;
	public boolean isRenderingFirstPersonHand;
	public boolean isHandRenderedMain;
	public boolean isHandRenderedOff;
	public boolean skipRenderHandMain;
	public boolean skipRenderHandOff;
	public boolean renderItemKeepDepthMask;
	public boolean itemToRenderMainTranslucent;
	public boolean itemToRenderOffTranslucent;
	public float[] sunPosition;
	public float[] moonPosition;
	public float[] shadowLightPosition;
	public float[] upPosition;
	public float[] shadowLightPositionVector;
	public float[] upPosModelView;
	public float[] sunPosModelView;
	public float[] moonPosModelView;
	public float[] tempMat;
	public Vector4f clearColor;
	public float skyColorR;
	public float skyColorG;
	public float skyColorB;
	public long worldTime;
	public long lastWorldTime;
	public long diffWorldTime;
	public float celestialAngle;
	public float sunAngle;
	public float shadowAngle;
	public int moonPhase;
	public long systemTime;
	public long lastSystemTime;
	public long diffSystemTime;
	public int frameCounter;
	public float frameTime;
	public float frameTimeCounter;
	public int systemTimeInt32;
	public float rainStrength;
	public float wetness;
	public float wetnessHalfLife;
	public float drynessHalfLife;
	public float eyeBrightnessHalflife;
	public boolean usewetness;
	public int isEyeInWater;
	public int eyeBrightness;
	public float eyeBrightnessFadeX;
	public float eyeBrightnessFadeY;
	public float eyePosY;
	public float centerDepth;
	public float centerDepthSmooth;
	public float centerDepthSmoothHalflife;
	public boolean centerDepthSmoothEnabled;
	public int superSamplingLevel;
	public float nightVision;
	public float blindness;
	public boolean lightmapEnabled;
	public boolean fogEnabled;
	public RenderStage renderStage;
	public int baseAttribId;
	public int entityAttrib;
	public int midTexCoordAttrib;
	public int tangentAttrib;
	public boolean useEntityAttrib;
	public boolean useMidTexCoordAttrib;
	public boolean useTangentAttrib;
	public boolean progUseEntityAttrib;
	public boolean progUseMidTexCoordAttrib;
	public boolean progUseTangentAttrib;
	public boolean progArbGeometryShader4;
	public int progMaxVerticesOut;
	public boolean hasGeometryShaders;
	public int atlasSizeX;
	public int atlasSizeY;
	public ShaderUniforms shaderUniforms;
	public ShaderUniform4f uniform_entityColor;
	public ShaderUniform1i uniform_entityId;
	public ShaderUniform1i uniform_blockEntityId;
	public ShaderUniform1i uniform_texture;
	public ShaderUniform1i uniform_lightmap;
	public ShaderUniform1i uniform_normals;
	public ShaderUniform1i uniform_specular;
	public ShaderUniform1i uniform_shadow;
	public ShaderUniform1i uniform_watershadow;
	public ShaderUniform1i uniform_shadowtex0;
	public ShaderUniform1i uniform_shadowtex1;
	public ShaderUniform1i uniform_depthtex0;
	public ShaderUniform1i uniform_depthtex1;
	public ShaderUniform1i uniform_shadowcolor;
	public ShaderUniform1i uniform_shadowcolor0;
	public ShaderUniform1i uniform_shadowcolor1;
	public ShaderUniform1i uniform_noisetex;
	public ShaderUniform1i uniform_gcolor;
	public ShaderUniform1i uniform_gdepth;
	public ShaderUniform1i uniform_gnormal;
	public ShaderUniform1i uniform_composite;
	public ShaderUniform1i uniform_gaux1;
	public ShaderUniform1i uniform_gaux2;
	public ShaderUniform1i uniform_gaux3;
	public ShaderUniform1i uniform_gaux4;
	public ShaderUniform1i uniform_colortex0;
	public ShaderUniform1i uniform_colortex1;
	public ShaderUniform1i uniform_colortex2;
	public ShaderUniform1i uniform_colortex3;
	public ShaderUniform1i uniform_colortex4;
	public ShaderUniform1i uniform_colortex5;
	public ShaderUniform1i uniform_colortex6;
	public ShaderUniform1i uniform_colortex7;
	public ShaderUniform1i uniform_gdepthtex;
	public ShaderUniform1i uniform_depthtex2;
	public ShaderUniform1i uniform_colortex8;
	public ShaderUniform1i uniform_colortex9;
	public ShaderUniform1i uniform_colortex10;
	public ShaderUniform1i uniform_colortex11;
	public ShaderUniform1i uniform_colortex12;
	public ShaderUniform1i uniform_colortex13;
	public ShaderUniform1i uniform_colortex14;
	public ShaderUniform1i uniform_colortex15;
	public ShaderUniform1i uniform_colorimg0;
	public ShaderUniform1i uniform_colorimg1;
	public ShaderUniform1i uniform_colorimg2;
	public ShaderUniform1i uniform_colorimg3;
	public ShaderUniform1i uniform_colorimg4;
	public ShaderUniform1i uniform_colorimg5;
	public ShaderUniform1i uniform_shadowcolorimg0;
	public ShaderUniform1i uniform_shadowcolorimg1;
	public ShaderUniform1i uniform_tex;
	public ShaderUniform1i uniform_heldItemId;
	public ShaderUniform1i uniform_heldBlockLightValue;
	public ShaderUniform1i uniform_heldItemId2;
	public ShaderUniform1i uniform_heldBlockLightValue2;
	public ShaderUniform1i uniform_fogMode;
	public ShaderUniform1f uniform_fogDensity;
	public ShaderUniform3f uniform_fogColor;
	public ShaderUniform3f uniform_skyColor;
	public ShaderUniform1i uniform_worldTime;
	public ShaderUniform1i uniform_worldDay;
	public ShaderUniform1i uniform_moonPhase;
	public ShaderUniform1i uniform_frameCounter;
	public ShaderUniform1f uniform_frameTime;
	public ShaderUniform1f uniform_frameTimeCounter;
	public ShaderUniform1f uniform_sunAngle;
	public ShaderUniform1f uniform_shadowAngle;
	public ShaderUniform1f uniform_rainStrength;
	public ShaderUniform1f uniform_aspectRatio;
	public ShaderUniform1f uniform_viewWidth;
	public ShaderUniform1f uniform_viewHeight;
	public ShaderUniform1f uniform_near;
	public ShaderUniform1f uniform_far;
	public ShaderUniform3f uniform_sunPosition;
	public ShaderUniform3f uniform_moonPosition;
	public ShaderUniform3f uniform_shadowLightPosition;
	public ShaderUniform3f uniform_upPosition;
	public ShaderUniform3f uniform_previousCameraPosition;
	public ShaderUniform3f uniform_cameraPosition;
	public ShaderUniformM4 uniform_gbufferModelView;
	public ShaderUniformM4 uniform_gbufferModelViewInverse;
	public ShaderUniformM4 uniform_gbufferPreviousProjection;
	public ShaderUniformM4 uniform_gbufferProjection;
	public ShaderUniformM4 uniform_gbufferProjectionInverse;
	public ShaderUniformM4 uniform_gbufferPreviousModelView;
	public ShaderUniformM4 uniform_shadowProjection;
	public ShaderUniformM4 uniform_shadowProjectionInverse;
	public ShaderUniformM4 uniform_shadowModelView;
	public ShaderUniformM4 uniform_shadowModelViewInverse;
	public ShaderUniform1f uniform_wetness;
	public ShaderUniform1f uniform_eyeAltitude;
	public ShaderUniform2i uniform_eyeBrightness;
	public ShaderUniform2i uniform_eyeBrightnessSmooth;
	public ShaderUniform2i uniform_terrainTextureSize;
	public ShaderUniform1i uniform_terrainIconSize;
	public ShaderUniform1i uniform_isEyeInWater;
	public ShaderUniform1f uniform_nightVision;
	public ShaderUniform1f uniform_blindness;
	public ShaderUniform1f uniform_screenBrightness;
	public ShaderUniform1i uniform_hideGUI;
	public ShaderUniform1f uniform_centerDepthSmooth;
	public ShaderUniform2i uniform_atlasSize;
	public ShaderUniform4f uniform_spriteBounds;
	public ShaderUniform4i uniform_blendFunc;
	public ShaderUniform1i uniform_instanceId;
	public ShaderUniform1f uniform_playerMood;
	public ShaderUniform1i uniform_renderStage;
	public double previousCameraPositionX;
	public double previousCameraPositionY;
	public double previousCameraPositionZ;
	public double cameraPositionX;
	public double cameraPositionY;
	public double cameraPositionZ;
	public int cameraOffsetX;
	public int cameraOffsetZ;
	public boolean hasShadowMap;
	public boolean needResizeShadow;
	public int shadowMapWidth;
	public int shadowMapHeight;
	public int spShadowMapWidth;
	public int spShadowMapHeight;
	public float shadowMapFOV;
	public float shadowMapHalfPlane;
	public boolean shadowMapIsOrtho;
	public float shadowDistanceRenderMul;
	public boolean shouldSkipDefaultShadow;
	public boolean waterShadowEnabled;
	public int MaxDrawBuffers;
	public int MaxColorBuffers;
	public int MaxDepthBuffers;
	public int MaxShadowColorBuffers;
	public int MaxShadowDepthBuffers;
	public int usedColorBuffers;
	public int usedDepthBuffers;
	public int usedShadowColorBuffers;
	public int usedShadowDepthBuffers;
	public int usedColorAttachs;
	public int usedDrawBuffers;
	public boolean bindImageTextures;
	public ShadersFramebuffer dfb;
	public ShadersFramebuffer sfb;
	public int[] gbuffersFormat;
	public boolean[] gbuffersClear;
	public Vector4f[] gbuffersClearColor;
	public Vector4f CLEAR_COLOR_0;
	public Vector4f CLEAR_COLOR_1;
	public int[] shadowBuffersFormat;
	public boolean[] shadowBuffersClear;
	public Vector4f[] shadowBuffersClearColor;
	public Programs programs;
	public Program ProgramNone;
	public Program ProgramShadow;
	public Program ProgramShadowSolid;
	public Program ProgramShadowCutout;
	public Program[] ProgramsShadowcomp;
	public Program[] ProgramsPrepare;
	public Program ProgramBasic;
	public Program ProgramTextured;
	public Program ProgramTexturedLit;
	public Program ProgramSkyBasic;
	public Program ProgramSkyTextured;
	public Program ProgramClouds;
	public Program ProgramTerrain;
	public Program ProgramTerrainSolid;
	public Program ProgramTerrainCutoutMip;
	public Program ProgramTerrainCutout;
	public Program ProgramDamagedBlock;
	public Program ProgramBlock;
	public Program ProgramBeaconBeam;
	public Program ProgramItem;
	public Program ProgramEntities;
	public Program ProgramEntitiesGlowing;
	public Program ProgramArmorGlint;
	public Program ProgramSpiderEyes;
	public Program ProgramHand;
	public Program ProgramWeather;
	public Program ProgramDeferredPre;
	public Program[] ProgramsDeferred;
	public Program ProgramDeferred;
	public Program ProgramWater;
	public Program ProgramHandWater;
	public Program ProgramCompositePre;
	public Program[] ProgramsComposite;
	public Program ProgramComposite;
	public Program ProgramFinal;
	public int ProgramCount;
	public Program[] ProgramsAll;
	public Program activeProgram;
	public int activeProgramID;
	public ProgramStack programStack;
	public boolean hasDeferredPrograms;
	public boolean hasShadowcompPrograms;
	public boolean hasPreparePrograms;
	public Properties loadedShaders;
	public Properties shadersConfig;
	public Texture defaultTexture;
	public boolean[] shadowHardwareFilteringEnabled;
	public boolean[] shadowMipmapEnabled;
	public boolean[] shadowFilterNearest;
	public boolean[] shadowColorMipmapEnabled;
	public boolean[] shadowColorFilterNearest;
	public boolean configTweakBlockDamage;
	public boolean configCloudShadow;
	public float configHandDepthMul;
	public float configRenderResMul;
	public float configShadowResMul;
	public int configTexMinFilB;
	public int configTexMinFilN;
	public int configTexMinFilS;
	public int configTexMagFilB;
	public int configTexMagFilN;
	public int configTexMagFilS;
	public boolean configShadowClipFrustrum;
	public boolean configNormalMap;
	public boolean configSpecularMap;
	public PropertyDefaultTrueFalse configOldLighting;
	public PropertyDefaultTrueFalse configOldHandLight;
	public int configAntialiasingLevel;
	public int texMinFilRange;
	public int texMagFilRange;
	public String[] texMinFilDesc;
	public String[] texMagFilDesc;
	public int[] texMinFilValue;
	public int[] texMagFilValue;
	public IShaderPack shaderPack;
	public boolean shaderPackLoaded;
	public String currentShaderName;
	public String SHADER_PACK_NAME_NONE;
	public String SHADER_PACK_NAME_DEFAULT;
	public String SHADER_PACKS_DIR_NAME;
	public String OPTIONS_FILE_NAME;
	public File shaderPacksDir;
	public File configFile;
	public ShaderOption[] shaderPackOptions;
	public Set<String> shaderPackOptionSliders;
	public ShaderProfile[] shaderPackProfiles;
	public Map<String, ScreenShaderOptions> shaderPackGuiScreens;
	public Map<String, IExpressionBool> shaderPackProgramConditions;
	public String PATH_SHADERS_PROPERTIES;
	public PropertyDefaultFastFancyOff shaderPackClouds;
	public PropertyDefaultTrueFalse shaderPackOldLighting;
	public PropertyDefaultTrueFalse shaderPackOldHandLight;
	public PropertyDefaultTrueFalse shaderPackDynamicHandLight;
	public PropertyDefaultTrueFalse shaderPackShadowTranslucent;
	public PropertyDefaultTrueFalse shaderPackUnderwaterOverlay;
	public PropertyDefaultTrueFalse shaderPackSun;
	public PropertyDefaultTrueFalse shaderPackMoon;
	public PropertyDefaultTrueFalse shaderPackVignette;
	public PropertyDefaultTrueFalse shaderPackBackFaceSolid;
	public PropertyDefaultTrueFalse shaderPackBackFaceCutout;
	public PropertyDefaultTrueFalse shaderPackBackFaceCutoutMipped;
	public PropertyDefaultTrueFalse shaderPackBackFaceTranslucent;
	public PropertyDefaultTrueFalse shaderPackRainDepth;
	public PropertyDefaultTrueFalse shaderPackBeaconBeamDepth;
	public PropertyDefaultTrueFalse shaderPackSeparateAo;
	public PropertyDefaultTrueFalse shaderPackFrustumCulling;
	public Map<String, String> shaderPackResources;
	public ClientWorld currentWorld;
	public List<Integer> shaderPackDimensions;
	public ICustomTexture[] customTexturesGbuffers;
	public ICustomTexture[] customTexturesComposite;
	public ICustomTexture[] customTexturesDeferred;
	public ICustomTexture[] customTexturesShadowcomp;
	public ICustomTexture[] customTexturesPrepare;
	public String noiseTexturePath;
	public DynamicDimension[] colorBufferSizes;
	public CustomUniforms customUniforms;
	public boolean saveFinalShaders;
	public float blockLightLevel05;
	public float blockLightLevel06;
	public float blockLightLevel08;
	public float aoLevel;
	public float sunPathRotation;
	public float shadowAngleInterval;
	public int fogMode;
	public float fogDensity;
	public float fogColorR;
	public float fogColorG;
	public float fogColorB;
	public float shadowIntervalSize;
	public int terrainIconSize;
	public int[] terrainTextureSize;
	public ICustomTexture noiseTexture;
	public boolean noiseTextureEnabled;
	public int noiseTextureResolution;
	public int[] colorTextureImageUnit;
	public int[] depthTextureImageUnit;
	public int[] shadowColorTextureImageUnit;
	public int[] shadowDepthTextureImageUnit;
	public int[] colorImageUnit;
	public int[] shadowColorImageUnit;
	public int bigBufferSize;
	public ByteBuffer bigBuffer;
	public float[] faProjection;
	public float[] faProjectionInverse;
	public float[] faModelView;
	public float[] faModelViewInverse;
	public float[] faShadowProjection;
	public float[] faShadowProjectionInverse;
	public float[] faShadowModelView;
	public float[] faShadowModelViewInverse;
	public FloatBuffer projection;
	public FloatBuffer projectionInverse;
	public FloatBuffer modelView;
	public FloatBuffer modelViewInverse;
	public FloatBuffer shadowProjection;
	public FloatBuffer shadowProjectionInverse;
	public FloatBuffer shadowModelView;
	public FloatBuffer shadowModelViewInverse;
	public FloatBuffer previousProjection;
	public FloatBuffer previousModelView;
	public FloatBuffer tempMatrixDirectBuffer;
	public FloatBuffer tempDirectFloatBuffer;
	public DrawBuffers dfbDrawBuffers;
	public DrawBuffers sfbDrawBuffers;
	public DrawBuffers drawBuffersNone;
	public DrawBuffers[] drawBuffersColorAtt;
	public boolean glDebugGroups;
	public boolean glDebugGroupProgram;
	public Map<Block, Integer> mapBlockToEntityData;
	public String[] formatNames;
	public int[] formatIds;
	public Pattern patternLoadEntityDataMap;
	public int[] entityData;
	public int entityDataIndex;


	public PerDimensionContext()
	{


	}

	public ByteBuffer nextByteBuffer(int size)
	{
		ByteBuffer buffer = bigBuffer;
		int pos = buffer.limit();
		buffer.position(pos).limit(pos + size);
		return buffer.slice();
	}

	public IntBuffer nextIntBuffer(int size)
	{
		ByteBuffer buffer = bigBuffer;
		int pos = buffer.limit();
		buffer.position(pos).limit(pos + size * 4);
		return buffer.asIntBuffer();
	}

	public FloatBuffer nextFloatBuffer(int size)
	{
		ByteBuffer buffer = bigBuffer;
		int pos = buffer.limit();
		buffer.position(pos).limit(pos + size * 4);
		return buffer.asFloatBuffer();
	}

	//some fields are initialized in loadShaderPack() it does not recognize dimension now
	//some fields are initialized in init() it recognizes dimension at that time
	//reset the fields that will be changed by init()
	//do not reset the fields that was initialized by loadShaderPack()
	public void doSpecialInit()
	{

		usedColorBuffers = 0;
		usedDepthBuffers = 0;
		usedShadowColorBuffers = 0;
		usedShadowDepthBuffers = 0;
		usedColorAttachs = 0;
		usedDrawBuffers = 0;

		gbuffersFormat = new int[8];
		gbuffersClear = new boolean[8];
		gbuffersClearColor = new Vector4f[8];
		programs = new Programs();
		ProgramNone = programs.getProgramNone();
		ProgramShadow = programs.makeShadow("shadow", ProgramNone);
		ProgramShadowSolid = programs.makeShadow("shadow_solid", ProgramShadow);
		ProgramShadowCutout = programs.makeShadow("shadow_cutout", ProgramShadow);
		ProgramBasic = programs.makeGbuffers("gbuffers_basic", ProgramNone);
		ProgramTextured = programs.makeGbuffers("gbuffers_textured", ProgramBasic);
		ProgramTexturedLit = programs.makeGbuffers("gbuffers_textured_lit", ProgramTextured);
		ProgramSkyBasic = programs.makeGbuffers("gbuffers_skybasic", ProgramBasic);
		ProgramSkyTextured = programs.makeGbuffers("gbuffers_skytextured", ProgramTextured);
		ProgramClouds = programs.makeGbuffers("gbuffers_clouds", ProgramTextured);
		ProgramTerrain = programs.makeGbuffers("gbuffers_terrain", ProgramTexturedLit);
		ProgramTerrainSolid = programs.makeGbuffers("gbuffers_terrain_solid", ProgramTerrain);
		ProgramTerrainCutoutMip = programs.makeGbuffers(
				"gbuffers_terrain_cutout_mip",
				ProgramTerrain
		);
		ProgramTerrainCutout = programs.makeGbuffers("gbuffers_terrain_cutout", ProgramTerrain);
		ProgramDamagedBlock = programs.makeGbuffers("gbuffers_damagedblock", ProgramTerrain);
		ProgramBlock = programs.makeGbuffers("gbuffers_block", ProgramTerrain);
		ProgramBeaconBeam = programs.makeGbuffers("gbuffers_beaconbeam", ProgramTextured);
		ProgramItem = programs.makeGbuffers("gbuffers_item", ProgramTexturedLit);
		ProgramEntities = programs.makeGbuffers("gbuffers_entities", ProgramTexturedLit);
		ProgramArmorGlint = programs.makeGbuffers("gbuffers_armor_glint", ProgramTextured);
		ProgramSpiderEyes = programs.makeGbuffers("gbuffers_spidereyes", ProgramTextured);
		ProgramHand = programs.makeGbuffers("gbuffers_hand", ProgramTexturedLit);
		ProgramWeather = programs.makeGbuffers("gbuffers_weather", ProgramTexturedLit);
		ProgramDeferredPre = programs.makeVirtual("deferred_pre");
		ProgramsDeferred = programs.makeDeferreds("deferred", 16);
		ProgramDeferred = ProgramsDeferred[0];
		ProgramWater = programs.makeGbuffers("gbuffers_water", ProgramTerrain);
		ProgramHandWater = programs.makeGbuffers("gbuffers_hand_water", ProgramHand);
		ProgramCompositePre = programs.makeVirtual("composite_pre");
		ProgramsComposite = programs.makeComposites("composite", 16);
		ProgramComposite = ProgramsComposite[0];
		ProgramFinal = programs.makeComposite("final");
		ProgramCount = programs.getCount();
		ProgramsAll = programs.getPrograms();
		activeProgram = ProgramNone;
		activeProgramID = 0;
		programStack = new ProgramStack();

		shadowHardwareFilteringEnabled = new boolean[2];
		shadowMipmapEnabled = new boolean[2];
		shadowFilterNearest = new boolean[2];
		shadowColorMipmapEnabled = new boolean[8];
		shadowColorFilterNearest = new boolean[8];
//        configTweakBlockDamage = false;
//        configCloudShadow = false;
//        configHandDepthMul = 0.125F;
//        configRenderResMul = 1.0F;
//        configShadowResMul = 1.0F;
//        configTexMinFilB = 0;
//        configTexMinFilN = 0;
//        configTexMinFilS = 0;
//        configTexMagFilB = 0;
//        configTexMagFilN = 0;
//        configTexMagFilS = 0;
//        configShadowClipFrustrum = true;
//        configNormalMap = true;
//        configSpecularMap = true;
//        configOldLighting = new PropertyDefaultTrueFalse("oldLighting", "Classic Lighting", 0);
//        configOldHandLight = new PropertyDefaultTrueFalse("oldHandLight", "Old Hand Light", 0);
//        configAntialiasingLevel = 0;
//        texMinFilDesc = new String[]{"Nearest", "Nearest-Nearest", "Nearest-Linear"};
//        texMagFilDesc = new String[]{"Nearest", "Linear"};
//        texMinFilValue = new int[]{9728, 9984, 9986};
//        texMagFilValue = new int[]{9728, 9729};
//        shaderPack = null;
//        shaderPackLoaded = false;
//        shaderPacksDir = new File(MinecraftClient.getInstance().runDirectory, "shaderpacks");
//        configFile = new File(MinecraftClient.getInstance().runDirectory, "optionsshaders.txt");
//        shaderPackOptions = null;
//        shaderPackOptionSliders = null;
//        shaderPackProfiles = null;
//        shaderPackGuiScreens = null;
//        shaderPackProgramConditions = new HashMap();
//        shaderPackClouds = new PropertyDefaultFastFancyOff("clouds", "Clouds", 0);
//        shaderPackOldLighting = new PropertyDefaultTrueFalse("oldLighting", "Classic Lighting", 0);
//        shaderPackOldHandLight = new PropertyDefaultTrueFalse("oldHandLight", "Old Hand Light", 0);
//        shaderPackDynamicHandLight = new PropertyDefaultTrueFalse("dynamicHandLight", "Dynamic Hand Light", 0);
//        shaderPackShadowTranslucent = new PropertyDefaultTrueFalse("shadowTranslucent", "Shadow Translucent", 0);
//        shaderPackUnderwaterOverlay = new PropertyDefaultTrueFalse("underwaterOverlay", "Underwater Overlay", 0);
//        shaderPackSun = new PropertyDefaultTrueFalse("sun", "Sun", 0);
//        shaderPackMoon = new PropertyDefaultTrueFalse("moon", "Moon", 0);
//        shaderPackVignette = new PropertyDefaultTrueFalse("vignette", "Vignette", 0);
//        shaderPackBackFaceSolid = new PropertyDefaultTrueFalse("backFace.solid", "Back-face Solid", 0);
//        shaderPackBackFaceCutout = new PropertyDefaultTrueFalse("backFace.cutout", "Back-face Cutout", 0);
//        shaderPackBackFaceCutoutMipped = new PropertyDefaultTrueFalse("backFace.cutoutMipped", "Back-face Cutout Mipped", 0);
//        shaderPackBackFaceTranslucent = new PropertyDefaultTrueFalse("backFace.translucent", "Back-face Translucent", 0);
//        shaderPackRainDepth = new PropertyDefaultTrueFalse("rain.depth", "Rain Depth", 0);
//        shaderPackBeaconBeamDepth = new PropertyDefaultTrueFalse("beacon.beam.depth", "Rain Depth", 0);
//        shaderPackSeparateAo = new PropertyDefaultTrueFalse("separateAo", "Separate AO", 0);
//        shaderPackFrustumCulling = new PropertyDefaultTrueFalse("frustum.culling", "Frustum Culling", 0);
//        shaderPackResources = new HashMap();
		currentWorld = null;
//        shaderPackDimensions = new ArrayList();
//        customTexturesGbuffers = null;
//        customTexturesComposite = null;
//        customTexturesDeferred = null;
//        noiseTexturePath = null;

		//multiple contexts share the same customUniforms
//        customUniforms = null;

//        STAGE_NAMES = new String[]{"gbuffers", "composite", "deferred"};
//        saveFinalShaders = System.getProperty("shaders.debug.save", "false").equals("true");
//        blockLightLevel05 = 0.5F;
//        blockLightLevel06 = 0.6F;
//        blockLightLevel08 = 0.8F;
//        aoLevel = -1.0F;
		sunPathRotation = 0.0F;
		shadowAngleInterval = 0.0F;
		fogMode = 0;
		fogDensity = 0.0F;
		shadowIntervalSize = 2.0F;
//        terrainIconSize = 16;
//        terrainTextureSize = new int[2];
//        noiseTextureEnabled = false;
//        noiseTextureResolution = 256;
//        colorTextureImageUnit = new int[]{0, 1, 2, 3, 7, 8, 9, 10};
		bigBufferSize = (285 + 8 * ProgramCount) * 4; //I increased buffer size
		bigBuffer = (ByteBuffer) BufferUtils.createByteBuffer(bigBufferSize).limit(0);
		faProjection = new float[16];
		faProjectionInverse = new float[16];
		faModelView = new float[16];
		faModelViewInverse = new float[16];
		faShadowProjection = new float[16];
		faShadowProjectionInverse = new float[16];
		faShadowModelView = new float[16];
		faShadowModelViewInverse = new float[16];
		projection = nextFloatBuffer(16);
		projectionInverse = nextFloatBuffer(16);
		modelView = nextFloatBuffer(16);
		modelViewInverse = nextFloatBuffer(16);
		shadowProjection = nextFloatBuffer(16);
		shadowProjectionInverse = nextFloatBuffer(16);
		shadowModelView = nextFloatBuffer(16);
		shadowModelViewInverse = nextFloatBuffer(16);
		previousProjection = nextFloatBuffer(16);
		previousModelView = nextFloatBuffer(16);
		tempMatrixDirectBuffer = nextFloatBuffer(16);
		tempDirectFloatBuffer = nextFloatBuffer(16);

		dfbDrawBuffers = new DrawBuffers("dfbDrawBuffers", 16, 8);
		sfbDrawBuffers = new DrawBuffers("sfbDrawBuffers", 16, 8);
		drawBuffersNone = (new DrawBuffers("drawBuffersNone", 16, 8)).limit(0);

		entityData = new int[32];
		entityDataIndex = 0;

		dfb = null;
		sfb = null;
	}

}
